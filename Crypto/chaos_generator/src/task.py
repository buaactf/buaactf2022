from libnum import s2n
from gmpy2 import next_prime
from random import randint
from Crypto.Util.number import getRandomNBitInteger

def chaos_maker(p, g, seed):
    res = 0
    x = seed
    for _ in range(randint(0, 114514)):
        x = pow(g, x, p)
    for i in range(256):
        x = pow(g, x, p)
        if x < (p-1) // 2:
            res -= (1 << i) - 1
        elif x > (p-1) // 2:
            res += (1 << i) + 1
        else:
            res ^= (1 << i + 1)
    return res if res > 0 else -res

def keygen(p, g):
    u, v = chaos_maker(p, g, randint(0, 1<<64)), chaos_maker(p, g, randint(0, 1<<64))
    return next_prime(u**2 + v**2) * next_prime(2*u*v)

p = 74318463376311964657848870236469351222861371046000989980725143814597652972079
g = 10135979321704650132001133858909900216529170765388975908180263641843583056994
N = keygen(p, g)
print(N)
# N = 46560744052031492000075598084262814175984839629218579003339825251165084535288738001196294968344403225296587992393409186512832442084313772062189640462381680977493272839744503195012137744652370256066011590369737294828406013950810998314546935103160880000499234316605414326064476117367727072344004644766745175963
e = 65537
flag = b'flag{for_what?}'
c = pow(s2n(flag), e, N)
print(c)
# 18718170916933734982604177330164772320053904403814104255875685251742261118629590236351098298313090076006651121445335895990777653983719398498191526414685447042616403629977829729736486841007783458563197914854273885526050393227742310765628724960770408421825305104161478862106009591789340544630864472927355009
# 6872190221185396818092831275694533267267840525731720965837199949880001976395351542197681862394327853724845491877608012933224154126719560773041559393559232954404310162197772615583563164399130558980301150472890792529332018926628176717020844636972508138857903704320907162171763305817057567032411629483170656