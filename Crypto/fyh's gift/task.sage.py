

# This file was *autogenerated* from the file task.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1227746669897024584176049601139983199725970765368150228682221 = Integer(1227746669897024584176049601139983199725970765368150228682221); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_62 = Integer(62); _sage_const_16 = Integer(16)
import hashlib
from Crypto.Cipher import AES
# from secret import flag
flag = b'flag{M33t~you~Aga|n!!g3n3r@Te_y0vr_0Wn_Curv3_1s_5o_$4n9erours!!}'
p = _sage_const_1227746669897024584176049601139983199725970765368150228682221  
a = _sage_const_2 
b = _sage_const_3 
E = EllipticCurve(GF(p), [a,b])
G = E.gens()[_sage_const_0 ]

def gen_key():
    sk = randint(_sage_const_1 , _sage_const_2  ** _sage_const_62 ) 
    pk = G * sk
    return sk, pk

# key_exchange
def gen_shared_secret(Q, n):
    return (Q * n)[_sage_const_0 ]

# use AES-CBC to encrypt, but it doesn't matter.
def encrypt_flag(shared_secret):
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:_sage_const_16 ]
    iv = b'\x00' * _sage_const_16 
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return cipher.encrypt(flag).hex()

# if you get the correct secret_key, just use this function(fill in your secret_key and ciphertext) and you will get the flag
def decrypt_flag(secret_key, ciphertext):
    sha1 = hashlib.sha1()
    sha1.update(str(secret_key).encode('ascii'))
    key = sha1.digest()[:_sage_const_16 ]
    iv = b'\x00' * _sage_const_16 
    enc = bytes.fromhex(ciphertext)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    flag = cipher.decrypt(enc).decode()
    return flag


alice_key = gen_key()
bob_key = gen_key()
print('Alice Public Key:', alice_key[_sage_const_1 ])
# Alice Public Key: (746531016843647516479002543179453961245960260624268299102100 : 834451478006931786514109630682442454295129970008354011901179 : 1)
print('Bob Public Key:', bob_key[_sage_const_1 ])
# Bob Public Key: (719571397062615714976990064610329107639579601352010052498026 : 1020496265308452968541064651463311857011157491043048759483951 : 1)
shared_secret = gen_shared_secret(alice_key[_sage_const_1 ], bob_key[_sage_const_0 ])
ciphertext = encrypt_flag(shared_secret)
print(ciphertext)
# 8d3203b60604555e160c4fd80225e0690445e4c9708d8e33f582b4f3dfab4d928b63c200e6765d5f61af84b1b9a2d65f
'''
# hint:order of a finite field is very important!!
# you can review LAB6 again, and mention the way of generating $P$!
small_prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293]
a = 2
b = 3
def gen_special_p():
    while True:
        p = random_prime(2^200-1,False,2^199)
        E = EllipticCurve(GF(p), [a,b])
        cnt = 0
        order = E.order()
        for prime in small_prime:
            if order % prime == 0:
                cnt += 1
        if cnt >= 5:
            break
    print(p, order, factor(order))
    return p
gen_special_p()
'''

