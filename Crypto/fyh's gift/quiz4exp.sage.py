

# This file was *autogenerated* from the file quiz4exp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1227746669897024584176049601139983199725970765368150228682221 = Integer(1227746669897024584176049601139983199725970765368150228682221); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_302815835537564389018621724598932443372058309945965909258476 = Integer(302815835537564389018621724598932443372058309945965909258476); _sage_const_101620440267876945129965564956309591452288432027338930366277 = Integer(101620440267876945129965564956309591452288432027338930366277); _sage_const_65110746247642118366859050011022338368545596077949479875681 = Integer(65110746247642118366859050011022338368545596077949479875681); _sage_const_1017598375305367769482826313607595483103330800029116590734900 = Integer(1017598375305367769482826313607595483103330800029116590734900); _sage_const_1 = Integer(1); _sage_const_10 = Integer(10); _sage_const_9 = Integer(9); _sage_const_16 = Integer(16)
import hashlib
from Crypto.Cipher import AES

p = _sage_const_1227746669897024584176049601139983199725970765368150228682221 
a = _sage_const_2 
b = _sage_const_3 
E = EllipticCurve(GF(p), [a,b])
n = E.order()
G = E.gens()[_sage_const_0 ]
QA = E(_sage_const_302815835537564389018621724598932443372058309945965909258476 , _sage_const_101620440267876945129965564956309591452288432027338930366277 )
QB = E(_sage_const_65110746247642118366859050011022338368545596077949479875681 , _sage_const_1017598375305367769482826313607595483103330800029116590734900 )

factors = list(factor(n))

def pohlig_hellman(G, Q):
    m = _sage_const_1 
    moduli, remainders = [], []
    for i, j in factors:
        if i > _sage_const_10  ** _sage_const_9 :
            break
        mod = i ** j
        g2 = G*(n//mod)
        q2 = Q*(n//mod)
        r = discrete_log(q2, g2, operation='+')
        remainders.append(r)
        moduli.append(mod)
        m *= mod

    r = crt(remainders, moduli)
    return r

def decrypt_flag(secret_key, ciphertext):
    sha1 = hashlib.sha1()
    sha1.update(str(secret_key).encode('ascii'))
    key = sha1.digest()[:_sage_const_16 ]
    iv = b'\x00' * _sage_const_16 
    enc = bytes.fromhex(ciphertext)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    flag = cipher.decrypt(enc).decode()
    return flag

skA = pohlig_hellman(G, QA)
skB = pohlig_hellman(G, QB)

secret_key = (QB * skA)[_sage_const_0 ]
ciphertext = 'da4ba62b1dbcdf0d8b3df8b4e253d7ef328c6a37a7d6569e9c2c577d683e1ba12d83828fdf2b2b390da5d05558f8dbcb0796ef874000f87486d679aa0c954a75'
print(decrypt_flag(secret_key, ciphertext))

